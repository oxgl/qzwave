package com.oxyggen.qzw.cc

import com.oxyggen.qzw.status.UpdateState

enum class CommandClass(val byteValue: Byte, val version: Int = 1) {
    ALARM(0x71.toByte()),
    ALARM_V2(0x71.toByte(), 2),
    NOTIFICATION_V3(0x71.toByte(), 3),
    NOTIFICATION_V4(0x71.toByte(), 4),
    NOTIFICATION_V5(0x71.toByte(), 5),
    NOTIFICATION_V6(0x71.toByte(), 6),
    NOTIFICATION_V7(0x71.toByte(), 7),
    NOTIFICATION_V8(0x71.toByte(), 8),
    APPLICATION_STATUS(0x22.toByte()),
    ASSOCIATION_COMMAND_CONFIGURATION(0x9B.toByte()),
    ASSOCIATION(0x85.toByte()),
    ASSOCIATION_V2(0x85.toByte(), 2),
    AV_CONTENT_DIRECTORY_MD(0x95.toByte()),
    AV_CONTENT_SEARCH_MD(0x97.toByte()),
    AV_RENDERER_STATUS(0x96.toByte()),
    AV_TAGGING_MD(0x99.toByte()),
    BASIC_TARIFF_INFO(0x36.toByte()),
    BASIC_WINDOW_COVERING(0x50.toByte()),
    BASIC(0x20.toByte()),
    BASIC_V2(0x20.toByte(), 2),
    BATTERY(0x80.toByte()),
    CHIMNEY_FAN(0x2A.toByte()),
    CLIMATE_CONTROL_SCHEDULE(0x46.toByte()),
    CLOCK(0x81.toByte()),
    CONFIGURATION(0x70.toByte()),
    CONFIGURATION_V2(0x70.toByte(), 2),
    CONFIGURATION_V3(0x70.toByte(), 3),
    CONFIGURATION_V4(0x70.toByte(), 4),
    CONTROLLER_REPLICATION(0x21.toByte()),
    CRC_16_ENCAP(0x56.toByte()),
    DCP_CONFIG(0x3A.toByte()),
    DCP_MONITOR(0x3B.toByte()),
    DOOR_LOCK_LOGGING(0x4C.toByte()),
    DOOR_LOCK(0x62.toByte()),
    DOOR_LOCK_V2(0x62.toByte(), 2),
    DOOR_LOCK_V3(0x62.toByte(), 3),
    ENERGY_PRODUCTION(0x90.toByte()),
    FIRMWARE_UPDATE_MD(0x7A.toByte()),
    FIRMWARE_UPDATE_MD_V2(0x7A.toByte(), 2),
    FIRMWARE_UPDATE_MD_V3(0x7A.toByte(), 3),
    FIRMWARE_UPDATE_MD_V4(0x7A.toByte(), 4),
    FIRMWARE_UPDATE_MD_V5(0x7A.toByte(), 5),
    GEOGRAPHIC_LOCATION(0x8C.toByte()),
    GROUPING_NAME(0x7B.toByte()),
    HAIL(0x82.toByte()),
    HRV_CONTROL(0x39.toByte()),
    HRV_STATUS(0x37.toByte()),
    INDICATOR(0x87.toByte()),
    INDICATOR_V2(0x87.toByte(), 2),
    IP_CONFIGURATION(0x9A.toByte()),
    LANGUAGE(0x89.toByte()),
    LOCK(0x76.toByte()),
    MANUFACTURER_PROPRIETARY(0x91.toByte()),
    MANUFACTURER_SPECIFIC(0x72.toByte()),
    MANUFACTURER_SPECIFIC_V2(0x72.toByte(), 2),
    MARK(0xEF.toByte()),
    METER_PULSE(0x35.toByte()),
    METER_TBL_CONFIG(0x3C.toByte()),
    METER_TBL_MONITOR(0x3D.toByte()),
    METER_TBL_MONITOR_V2(0x3D.toByte(), 2),
    METER_TBL_PUSH(0x3E.toByte()),
    METER(0x32.toByte()),
    METER_V2(0x32.toByte(), 2),
    METER_V3(0x32.toByte(), 3),
    METER_V4(0x32.toByte(), 4),
    METER_V5(0x32.toByte(), 5),
    MTP_WINDOW_COVERING(0x51.toByte()),
    MULTI_CHANNEL_ASSOCIATION_V2(0x8E.toByte(), 2),
    MULTI_CHANNEL_ASSOCIATION_V3(0x8E.toByte(), 3),
    MULTI_CHANNEL_V2(0x60.toByte(), 2),
    MULTI_CHANNEL_V3(0x60.toByte(), 3),
    MULTI_CHANNEL_V4(0x60.toByte(), 4),
    MULTI_CMD(0x8F.toByte()),
    MULTI_INSTANCE_ASSOCIATION(0x8E.toByte()),
    MULTI_INSTANCE(0x60.toByte()),
    NETWORK_MANAGEMENT_PROXY(0x52.toByte()),
    NETWORK_MANAGEMENT_PROXY_V2(0x52.toByte(), 2),
    NETWORK_MANAGEMENT_BASIC(0x4D.toByte()),
    NETWORK_MANAGEMENT_BASIC_V2(0x4D.toByte(), 2),
    NETWORK_MANAGEMENT_INCLUSION(0x34.toByte()),
    NETWORK_MANAGEMENT_INCLUSION_V2(0x34.toByte(), 2),
    NETWORK_MANAGEMENT_INCLUSION_V3(0x34.toByte(), 3),
    NO_OPERATION(0x00.toByte()),
    NODE_NAMING(0x77.toByte()),
    NON_INTEROPERABLE(0xF0.toByte()),
    POWERLEVEL(0x73.toByte()),
    PREPAYMENT_ENCAPSULATION(0x41.toByte()),
    PREPAYMENT(0x3F.toByte()),
    PROPRIETARY(0x88.toByte()),
    PROTECTION(0x75.toByte()),
    PROTECTION_V2(0x75.toByte(), 2),
    RATE_TBL_CONFIG(0x48.toByte()),
    RATE_TBL_MONITOR(0x49.toByte()),
    REMOTE_ASSOCIATION_ACTIVATE(0x7C.toByte()),
    REMOTE_ASSOCIATION(0x7D.toByte()),
    SCENE_ACTIVATION(0x2B.toByte()),
    SCENE_ACTUATOR_CONF(0x2C.toByte()),
    SCENE_CONTROLLER_CONF(0x2D.toByte()),
    SCHEDULE_ENTRY_LOCK(0x4E.toByte()),
    SCHEDULE_ENTRY_LOCK_V2(0x4E.toByte(), 2),
    SCHEDULE_ENTRY_LOCK_V3(0x4E.toByte(), 3),
    SCREEN_ATTRIBUTES(0x93.toByte()),
    SCREEN_ATTRIBUTES_V2(0x93.toByte(), 2),
    SCREEN_MD(0x92.toByte()),
    SCREEN_MD_V2(0x92.toByte(), 2),
    SECURITY_PANEL_MODE(0x24.toByte()),
    SECURITY_PANEL_ZONE_SENSOR(0x2F.toByte()),
    SECURITY_PANEL_ZONE(0x2E.toByte()),
    SECURITY(0x98.toByte()),
    SENSOR_ALARM(0x9C.toByte()),
    SENSOR_BINARY(0x30.toByte()),
    SENSOR_BINARY_V2(0x30.toByte(), 2),
    SENSOR_CONFIGURATION(0x9E.toByte()),
    SENSOR_MULTILEVEL(0x31.toByte()),
    SENSOR_MULTILEVEL_V2(0x31.toByte(), 2),
    SENSOR_MULTILEVEL_V3(0x31.toByte(), 3),
    SENSOR_MULTILEVEL_V4(0x31.toByte(), 4),
    SENSOR_MULTILEVEL_V5(0x31.toByte(), 5),
    SENSOR_MULTILEVEL_V6(0x31.toByte(), 6),
    SENSOR_MULTILEVEL_V7(0x31.toByte(), 7),
    SENSOR_MULTILEVEL_V8(0x31.toByte(), 8),
    SENSOR_MULTILEVEL_V9(0x31.toByte(), 9),
    SENSOR_MULTILEVEL_V10(0x31.toByte(), 10),
    SENSOR_MULTILEVEL_V11(0x31.toByte(), 11),
    SILENCE_ALARM(0x9D.toByte()),
    SIMPLE_AV_CONTROL(0x94.toByte()),
    SWITCH_ALL(0x27.toByte()),
    SWITCH_BINARY(0x25.toByte()),
    SWITCH_BINARY_V2(0x25.toByte(), 2),
    SWITCH_MULTILEVEL(0x26.toByte()),
    SWITCH_MULTILEVEL_V2(0x26.toByte(), 2),
    SWITCH_MULTILEVEL_V3(0x26.toByte(), 3),
    SWITCH_MULTILEVEL_V4(0x26.toByte(), 4),
    SWITCH_TOGGLE_BINARY(0x28.toByte()),
    SWITCH_TOGGLE_MULTILEVEL(0x29.toByte()),
    TARIFF_CONFIG(0x4A.toByte()),
    TARIFF_TBL_MONITOR(0x4B.toByte()),
    THERMOSTAT_FAN_MODE(0x44.toByte()),
    THERMOSTAT_FAN_MODE_V2(0x44.toByte(), 2),
    THERMOSTAT_FAN_MODE_V3(0x44.toByte(), 3),
    THERMOSTAT_FAN_MODE_V4(0x44.toByte(), 4),
    THERMOSTAT_FAN_STATE(0x45.toByte()),
    THERMOSTAT_FAN_STATE_V2(0x45.toByte(), 2),
    THERMOSTAT_HEATING(0x38.toByte()),
    THERMOSTAT_MODE(0x40.toByte()),
    THERMOSTAT_MODE_V2(0x40.toByte(), 2),
    THERMOSTAT_MODE_V3(0x40.toByte(), 3),
    THERMOSTAT_OPERATING_STATE(0x42.toByte()),
    THERMOSTAT_OPERATING_STATE_V2(0x42.toByte(), 2),
    THERMOSTAT_SETBACK(0x47.toByte()),
    THERMOSTAT_SETPOINT(0x43.toByte()),
    THERMOSTAT_SETPOINT_V2(0x43.toByte(), 2),
    THERMOSTAT_SETPOINT_V3(0x43.toByte(), 3),
    TIME_PARAMETERS(0x8B.toByte()),
    TIME(0x8A.toByte()),
    TIME_V2(0x8A.toByte(), 2),
    TRANSPORT_SERVICE_V2(0x55.toByte(), 2),
    TRANSPORT_SERVICE(0x55.toByte()),
    USER_CODE(0x63.toByte()),
    VERSION(0x86.toByte()),
    VERSION_V2(0x86.toByte(), 2),
    VERSION_V3(0x86.toByte(), 3),
    WAKE_UP(0x84.toByte()),
    WAKE_UP_V2(0x84.toByte(), 2),
    ZIP_6LOWPAN(0x4F.toByte()),
    ZIP(0x23.toByte()),
    ZIP_V2(0x23.toByte(), 2),
    ZIP_V3(0x23.toByte(), 3),
    APPLICATION_CAPABILITY(0x57.toByte()),
    SWITCH_COLOR(0x33.toByte()),
    SWITCH_COLOR_V2(0x33.toByte(), 2),
    SWITCH_COLOR_V3(0x33.toByte(), 3),
    SCHEDULE(0x53.toByte()),
    SCHEDULE_V2(0x53.toByte(), 2),
    SCHEDULE_V3(0x53.toByte(), 3),
    SCHEDULE_V4(0x53.toByte(), 4),
    NETWORK_MANAGEMENT_PRIMARY(0x54.toByte()),
    ZIP_ND(0x58.toByte()),
    ASSOCIATION_GRP_INFO(0x59.toByte()),
    ASSOCIATION_GRP_INFO_V2(0x59.toByte(), 2),
    ASSOCIATION_GRP_INFO_V3(0x59.toByte(), 3),
    DEVICE_RESET_LOCALLY(0x5A.toByte()),
    CENTRAL_SCENE(0x5B.toByte()),
    CENTRAL_SCENE_V2(0x5B.toByte(), 2),
    CENTRAL_SCENE_V3(0x5B.toByte(), 3),
    IP_ASSOCIATION(0x5C.toByte()),
    ANTITHEFT(0x5D.toByte()),
    ANTITHEFT_V2(0x5D.toByte(), 2),
    ZWAVEPLUS_INFO(0x5E.toByte()),
    ZWAVEPLUS_INFO_V2(0x5E.toByte(), 2),
    ZIP_GATEWAY(0x5F.toByte()),
    ZIP_PORTAL(0x61.toByte()),
    DMX(0x65.toByte()),
    BARRIER_OPERATOR(0x66.toByte()),
    NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE(0x67.toByte()),
    NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE_V2(0x67.toByte(), 2),
    ZIP_NAMING(0x68.toByte()),
    MAILBOX(0x69.toByte()),
    WINDOW_COVERING(0x6A.toByte()),
    SECURITY_2(0x9F.toByte()),
    IRRIGATION(0x6B.toByte()),
    SUPERVISION(0x6C.toByte()),
    HUMIDITY_CONTROL_SETPOINT(0x64.toByte()),
    HUMIDITY_CONTROL_MODE(0x6D.toByte()),
    HUMIDITY_CONTROL_OPERATING_STATE(0x6E.toByte()),
    ENTRY_CONTROL(0x6F.toByte()),
    INCLUSION_CONTROLLER(0x74.toByte()),
    NODE_PROVISIONING(0x78.toByte());

    companion object {
        fun getByByteValue(byteValue: Byte, version: Int = 1): CommandClass? =
            CommandClass.values().firstOrNull { it.byteValue == byteValue && it.version == version }
    }
}